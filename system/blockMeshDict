/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 0.001;

vertices
(
    (0 0 1)
    (30 0 1)
    (30 0 0)
    (0 0 0)
    (0 5 1)
    (30 5 1)
    (30 5 0)
    (0 5 0)
    (0 15 1)
    (30 15 1)
    (30 15 0)
    (0 15 0)
);

blocks
(
    hex (3 2 6 7 0 1 5 4)
    (48 8 1)
    simpleGrading (1 1 1)

    hex (7 6 10 11 4 5 9 8)
    (48 16 1)
    simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (0 4 7 3)
	    (4 8 11 7)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (1 2 6 5)
	);
    }
    wallBoundary
    {
        type wall;
        faces
        (
            (8 9 10 11)
	    (5 6 10 9)
        );
    }
    symmetricBoundary
    {
        type symmetry;
        faces
        (
	    (0 3 2 1)
        );
    }
    frontAndBack
    {
        type empty;
        faces
        (
            (0 1 5 4)
	    (4 5 9 8)
	    (2 3 7 6)
	    (6 7 11 10)
        );
    }
);


// vertices
// (
//     (0 0 1)
//     (30 0 1)
//     (30 0 0)
//     (0 0 0)
//     (0 15 1)
//     (30 15 1)
//     (30 15 0)
//     (0 15 0)
//     (60 0 1)
//     (60 0 0)
//     (60 15 1)
//     (60 15 0)
// );

// blocks
// (
//     //hex (0 1 2 3 4 5 6 7)
//     hex (3 2 6 7 0 1 5 4)
//     (96 48 1)
//     simpleGrading (1 1 1)

//     //hex (1 8 9 2 5 10 11 6)
//     hex (2 9 11 6 1 8 10 5)
//     (96 48 1)
//     simpleGrading (1 1 1)
// );

// edges
// (
// );

// boundary
// (
//     inlet
//     {
//         type patch;
//         faces
//         (
//             (0 4 7 3)
//         );
//     }
//     outlet
//     {
//         type patch;
//         faces
//         (
//             (8 9 11 10)
//         );
//     }
//     wallBoundary
//     {
//         type wall;
//         faces
//         (
//             (0 3 2 1)
// 	    (1 2 9 8)
//         );
//     }
//     symmetricBoundary
//     {
//         type symmetry;
//         faces
//         (
// 	    (4 5 6 7)
// 	    (5 10 11 6)
//         );
//     }
//     frontAndBack
//     {
//         type empty;
//         faces
//         (
//             (0 1 5 4)
// 	    (2 3 7 6)
// 	    (1 8 10 5)
// 	    (2 6 11 9)
//         );
//     }
// );





// vertices
// (
//     (-10 0 0)
//     (0 0 0)
//     (30 0 0)
//     (40 0 0)
//     (-10 5 0)
//     (0 5 0)
//     (30 5 0)
//     (40 5 0)
//     (-10 0 1)
//     (0 0 1)
//     (30 0 1)
//     (40 0 1)
//     (-10 5 1)
//     (0 5 1)
//     (30 5 1)
//     (40 5 1)
//     (0 15 0)
//     (30 15 0)
//     (0 15 1)
//     (30 15 1)
// );

// blocks
// (
//     hex (0 1 9 8 4 5 13 12)
//     (32 16 1)
//     simpleGrading (1 1 1)

//     hex (1 2 10 9 5 6 14 13)
//     (96 16 1)
//     simpleGrading (1 1 1)

//     hex (5 6 14 13 16 17 19 18)
//     (96 32 1)
//     simpleGrading (1 1 1)

//     hex (2 3 11 10 6 7 15 14)
//     (32 16 1)
//     simpleGrading (1 1 1)
// );

// edges
// (
// );

// boundary
// (
//     inlet
//     {
//         type patch;
//         faces
//         (
//             (0 4 12 18)
//         );
//     }
//     outlet
//     {
//         type patch;
//         faces
//         (
//             (3 11 15 17)
//         );
//     }
//     wallBoundary
//     {
//         type wall;
//         faces
//         (
//             (4 5 13 12)
//             (5 16 18 13)
//             (16 17 19 18)
//             (6 14 19 17)
//             (6 7 15 14)
//         );
//     }
//     symmetricBoundary
//     {
//         type symmetry;
//         faces
//         (
//             (0 8 9 1)
//             (1 9 10 2)
//             (2 10 11 3)
//         );
//     }
//     frontAndBack
//     {
//         type empty;
//         faces
//         (
//             (0 1 5 4)
// 	    (1 2 6 5)
// 	    (5 6 17 16)
// 	    (2 3 7 6)
// 	    (8 12 13 9)
// 	    (9 13 14 10)
// 	    (13 18 19 14)
// 	    (10 14 15 11)
//         );
//     }
// );





// convertToMeters 0.01;
// vertices
// (
//     (0 0 -0.0025)
//     (0.5 0 -0.0025)
//     (0.5 1 -0.0025)
//     (0 1 -0.0025)
//     (0.5 1.2 -0.0025)
//     (0.4 1.2 -0.0025)
//     (0.4 1 -0.0025)
//     (0.4 0 -0.0025)
//     (0.4 -0.2 -0.0025)
//     (0.5 -0.2 -0.0025)

//     (0 0 0)
//     (0.5 0 0)
//     (0.5 1 0)
//     (0 1 0)
//     (0.5 1.2 0)
//     (0.4 1.2 0)
//     (0.4 1 0)
//     (0.4 0 0)
//     (0.4 -0.2 0)
//     (0.5 -0.2 0)  
// );



// blocks
// (
//     hex (0 7 6 3 10 17 16 13)
//     (160 400 1)
//     simpleGrading (1 1 1)

//     hex (7 1 2 6 17 11 12 16)
//     zone_test
//     (40 400 1)
//     simpleGrading (1 1 1)

//     hex (6 2 4 5 16 12 14 15)
//     zone_fluid
//     (40 80 1)
//     simpleGrading (1 1 1)

//     hex (1 7 8 9 11 17 18 19)
//     zone_fluid
//     (40 80 1)
//     simpleGrading (1 1 1)
// );

// edges
// (
// );

// boundary
// (
//     inlet
//     {
//         type patch;
//         faces
//         (
//             (4 5 15 14)
//         );
//     }
//     outlet
//     {
//         type patch;
//         faces
//         (
//             (19 18 8 9)
//         );
//     }
//     Wall
//     {
//         type wall;
//         faces
//         (
//             (0 10 13 3)
//             (0 7 17 10)
//             (7 8 18 17)
//             (5 6 16 15)
//             (6 3 13 16)
//         );
//     }
//     right
//     {
//         type symmetry;
//         faces
//         (
//             (1 2 12 11)
//             (2 4 14 12)
//             (9 1 11 19)
//         );
//     }
//     frontAndBack
//     {
//         type empty;
//         faces
//         (
//             (0 3 6 7)
//             (6 2 1 7)
//             (9 8 7 1)
//             (6 5 4 2)
//             (10 17 16 13)
//             (17 11 12 16)
//             (11 17 18 19)
//             (12 14 15 16)
//         );
//     }
// );
// mergePatchPairs
// (
// );






// convertToMeters 0.001;

// vertices
// (
//     (-20.6 0 -0.5)
//     (-20.6 25.4 -0.5)
//     (0 -25.4 -0.5)
//     (0 0 -0.5)
//     (0 25.4 -0.5)
//     (206 -25.4 -0.5)
//     (206 0 -0.5)
//     (206 25.4 -0.5)
//     (290 -16.6 -0.5)
//     (290 0 -0.5)
//     (290 16.6 -0.5)

//     (-20.6 0 0.5)
//     (-20.6 25.4 0.5)
//     (0 -25.4 0.5)
//     (0 0 0.5)
//     (0 25.4 0.5)
//     (206 -25.4 0.5)
//     (206 0 0.5)
//     (206 25.4 0.5)
//     (290 -16.6 0.5)
//     (290 0 0.5)
//     (290 16.6 0.5)
// );

// negY
// (
//     (2 4 1)
//     (1 3 0.3)
// );

// posY
// (
//     (1 4 2)
//     (2 3 4)
//     (2 4 0.25)
// );

// posYR
// (
//     (2 1 1)
//     (1 1 0.25)
// );


// blocks
// (
//     hex (0 3 4 1 11 14 15 12)
//     (18 30 1)
//     simpleGrading (0.5 $posY 1)

//     hex (2 5 6 3 13 16 17 14)
//     (180 27 1)
//     edgeGrading (4 4 4 4 $negY 1 1 $negY 1 1 1 1)

//     hex (3 6 7 4 14 17 18 15)
//     (180 30 1)
//     edgeGrading (4 4 4 4 $posY $posYR $posYR $posY 1 1 1 1)

//     hex (5 8 9 6 16 19 20 17)
//     (25 27 1)
//     simpleGrading (2.5 1 1)

//     hex (6 9 10 7 17 20 21 18)
//     (25 30 1)
//     simpleGrading (2.5 $posYR 1)
// );

// edges
// (
// );

// boundary
// (
//     inlet
//     {
//         type patch;
//         faces
//         (
//             (0 1 12 11)
//         );
//     }
//     outlet
//     {
//         type patch;
//         faces
//         (
//             (8 9 20 19)
//             (9 10 21 20)
//         );
//     }
//     upperWall
//     {
//         type wall;
//         faces
//         (
//             (1 4 15 12)
//             (4 7 18 15)
//             (7 10 21 18)
//         );
//     }
//     lowerWall
//     {
//         type wall;
//         faces
//         (
//             (0 3 14 11)
//             (3 2 13 14)
//             (2 5 16 13)
//             (5 8 19 16)
//         );
//     }
//     frontAndBack
//     {
//         type empty;
//         faces
//         (
//             (0 3 4 1)
//             (2 5 6 3)
//             (3 6 7 4)
//             (5 8 9 6)
//             (6 9 10 7)
//             (11 14 15 12)
//             (13 16 17 14)
//             (14 17 18 15)
//             (16 19 20 17)
//             (17 20 21 18)
//         );
//     }
// );

// ************************************************************************* //
